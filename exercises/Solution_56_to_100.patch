diff --git a/exercises/Solution_56_to_100.patch b/exercises/Solution_56_to_100.patch
index cb11db9..e69de29 100644
--- a/exercises/Solution_56_to_100.patch
+++ b/exercises/Solution_56_to_100.patch
@@ -1,81 +0,0 @@
-diff --git a/exercises/error_handling/errors6.rs b/exercises/error_handling/errors6.rs
-index 3343c2f..7bc79a4 100644
---- a/exercises/error_handling/errors6.rs
-+++ b/exercises/error_handling/errors6.rs
-@@ -9,7 +9,6 @@
- // Execute `rustlings hint errors6` or use the `hint` watch subcommand for a
- // hint.
- 
--// I AM NOT DONE
- 
- use std::num::ParseIntError;
- 
-@@ -33,13 +32,20 @@ impl ParsePosNonzeroError {
- fn parse_pos_nonzero(s: &str) -> Result<PositiveNonzeroInteger, ParsePosNonzeroError> {
-     // TODO: change this to return an appropriate error instead of panicking
-     // when `parse()` returns an error.
--    let x: i64 = s.parse().unwrap();
--    match Some(ParsePosNonzeroError) {
--        ParseInt(x) => PositiveNonzeroInteger::new(x).map_err(ParsePosNonzeroError::from_parseint),
-+    /* 1 */
-+    // let x: i64 = s.parse().map_err(|err| ParsePosNonzeroError::from_parseint(err))?;
-+    /* 2 */
-+    // let x: i64 = s.parse().map_err(ParsePosNonzeroError::from_parseint)?;
-+    /* 3 */
-+    let x: i64 = s.parse()?;
-+    PositiveNonzeroInteger::new(x).map_err(ParsePosNonzeroError::from_creation)
-+}
- 
-+/* 3 */
-+impl From<ParseIntError> for ParsePosNonzeroError {
-+    fn from(error: ParseIntError) -> Self {
-+        ParsePosNonzeroError::from_parseint(error)
-     }
--    PositiveNonzeroInteger::new(x).map_err(ParsePosNonzeroError::from_creation)
--    
- }
- 
- // Don't change anything below this line.
-diff --git a/exercises/generics/generics1.rs b/exercises/generics/generics1.rs
-index 35c1d2f..15797c2 100644
---- a/exercises/generics/generics1.rs
-+++ b/exercises/generics/generics1.rs
-@@ -6,9 +6,13 @@
- // Execute `rustlings hint generics1` or use the `hint` watch subcommand for a
- // hint.
- 
--// I AM NOT DONE
- 
- fn main() {
--    let mut shopping_list: Vec<?> = Vec::new();
-+    /* 1 */
-+    // let mut shopping_list: Vec<&str> = Vec::new();
-+    /* 2 */
-+    let mut shopping_list = Vec::new();
-     shopping_list.push("milk");
-+    // shopping_list.push("1");
-+    // println!("{:?}", shopping_list.pop());
- }
-diff --git a/exercises/generics/generics2.rs b/exercises/generics/generics2.rs
-index 074cd93..f949355 100644
---- a/exercises/generics/generics2.rs
-+++ b/exercises/generics/generics2.rs
-@@ -6,14 +6,13 @@
- // Execute `rustlings hint generics2` or use the `hint` watch subcommand for a
- // hint.
- 
--// I AM NOT DONE
- 
--struct Wrapper {
--    value: u32,
-+struct Wrapper<T> {
-+    value: T,
- }
- 
--impl Wrapper {
--    pub fn new(value: u32) -> Self {
-+impl<T> Wrapper<T> {
-+    pub fn new(value: T) -> Self {
-         Wrapper { value }
-     }
- }
diff --git a/exercises/traits/traits1.rs b/exercises/traits/traits1.rs
index 37dfcbf..fe8ad37 100644
--- a/exercises/traits/traits1.rs
+++ b/exercises/traits/traits1.rs
@@ -7,14 +7,17 @@
 // Execute `rustlings hint traits1` or use the `hint` watch subcommand for a
 // hint.
 
-// I AM NOT DONE
 
 trait AppendBar {
     fn append_bar(self) -> Self;
 }
 
 impl AppendBar for String {
-    // TODO: Implement `AppendBar` for type `String`.
+    fn append_bar(mut self) -> Self {
+        self.push_str("Bar");
+        self
+    }
+     // TODO: Implement `AppendBar` for type `String`.
 }
 
 fn main() {
diff --git a/exercises/traits/traits2.rs b/exercises/traits/traits2.rs
index 3e35f8e..8fc382a 100644
--- a/exercises/traits/traits2.rs
+++ b/exercises/traits/traits2.rs
@@ -8,13 +8,19 @@
 //
 // Execute `rustlings hint traits2` or use the `hint` watch subcommand for a hint.
 
-// I AM NOT DONE
 
 trait AppendBar {
     fn append_bar(self) -> Self;
 }
 
 // TODO: Implement trait `AppendBar` for a vector of strings.
+impl AppendBar for Vec<String> {
+    fn append_bar(mut self) -> Self {
+        self.push("Bar".to_string());
+        self
+    } 
+}
+
 
 #[cfg(test)]
 mod tests {
diff --git a/exercises/traits/traits3.rs b/exercises/traits/traits3.rs
index 4e2b06b..0171dab 100644
--- a/exercises/traits/traits3.rs
+++ b/exercises/traits/traits3.rs
@@ -8,10 +8,11 @@
 // Execute `rustlings hint traits3` or use the `hint` watch subcommand for a
 // hint.
 
-// I AM NOT DONE
-
+/* defalt implement */
 pub trait Licensed {
-    fn licensing_info(&self) -> String;
+    fn licensing_info(&self) -> String {
+        String::from("Some information") 
+    }
 }
 
 struct SomeSoftware {
diff --git a/exercises/traits/traits4.rs b/exercises/traits/traits4.rs
index 4bda3e5..27ce6bb 100644
--- a/exercises/traits/traits4.rs
+++ b/exercises/traits/traits4.rs
@@ -7,7 +7,6 @@
 // Execute `rustlings hint traits4` or use the `hint` watch subcommand for a
 // hint.
 
-// I AM NOT DONE
 
 pub trait Licensed {
     fn licensing_info(&self) -> String {
@@ -23,7 +22,11 @@ impl Licensed for SomeSoftware {}
 impl Licensed for OtherSoftware {}
 
 // YOU MAY ONLY CHANGE THE NEXT LINE
-fn compare_license_types(software: ??, software_two: ??) -> bool {
+fn compare_license_types<T, U>(software: T, software_two: U) -> bool 
+where 
+    T: Licensed,
+    U: Licensed,
+{
     software.licensing_info() == software_two.licensing_info()
 }
 
diff --git a/exercises/traits/traits5.rs b/exercises/traits/traits5.rs
index df18380..7a1fe1b 100644
--- a/exercises/traits/traits5.rs
+++ b/exercises/traits/traits5.rs
@@ -7,7 +7,6 @@
 // Execute `rustlings hint traits5` or use the `hint` watch subcommand for a
 // hint.
 
-// I AM NOT DONE
 
 pub trait SomeTrait {
     fn some_function(&self) -> bool {
@@ -30,7 +29,10 @@ impl SomeTrait for OtherStruct {}
 impl OtherTrait for OtherStruct {}
 
 // YOU MAY ONLY CHANGE THE NEXT LINE
-fn some_func(item: ??) -> bool {
+fn some_func <T>(item: T) -> bool 
+where
+    T: SomeTrait + OtherTrait 
+{
     item.some_function() && item.other_function()
 }
 
